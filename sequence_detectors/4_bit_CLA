module cla_4bit (
    input  [3:0] A,
    input  [3:0] B,
    input        Cin,
    output [3:0] Sum,
    output       Cout
);

    wire [3:0] G;  // Generate
    wire [3:0] P;  // Propagate
    wire [3:0] C;  // Internal carry

    // Generate and Propagate signals
    assign G = A & B;  // Generate: 1 if both bits are 1
    assign P = A ^ B;  // Propagate: 1 if one of the bits is 1

    // Carry look-ahead logic
    assign C[0] = Cin;
    assign C[1] = G[0] | (P[0] & C[0]);
    assign C[2] = G[1] | (P[1] & G[0]) | (P[1] & P[0] & C[0]);
    assign C[3] = G[2] | (P[2] & G[1]) | (P[2] & P[1] & G[0]) | (P[2] & P[1] & P[0] & C[0]);

    // Final carry out
    assign Cout = G[3] | (P[3] & C[3]);

    // Sum calculation
    assign Sum = P ^ C;

endmodule
