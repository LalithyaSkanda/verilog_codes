module fifo #(
    parameter DATA_WIDTH = 8,
    parameter DEPTH = 16,
    parameter ADDR_WIDTH = $clog2(DEPTH)
)(
    input  wire                 clk,
    input  wire                 rst,
    input  wire                 wr_en,  // Write enable
    input  wire                 rd_en,  // Read enable
    input  wire [DATA_WIDTH-1:0] din,   // Data input
    output reg  [DATA_WIDTH-1:0] dout,  // Data output
    output wire                 full,
    output wire                 empty
);

    // Memory array
    reg [DATA_WIDTH-1:0] mem [0:DEPTH-1];

    // Pointers
    reg [ADDR_WIDTH:0] wr_ptr, rd_ptr;

    // Full and empty flags
    assign full  = (wr_ptr - rd_ptr == DEPTH);
    assign empty = (wr_ptr == rd_ptr);

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            wr_ptr <= 0;
        end else if (wr_en && !full) begin
            mem[wr_ptr[ADDR_WIDTH-1:0]] <= din;
            wr_ptr <= wr_ptr + 1;
        end
    end

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            rd_ptr <= 0;
            dout   <= 0;
        end else if (rd_en && !empty) begin
            dout   <= mem[rd_ptr[ADDR_WIDTH-1:0]];
            rd_ptr <= rd_ptr + 1;
        end
    end

endmodule
